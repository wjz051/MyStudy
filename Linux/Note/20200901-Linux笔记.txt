echo 在终端输出字符串或变量提取后的值 echo $SHELL

date 显示及设置系统的时间或日期 date "+%Y-%m-%d %H:%M:%S"    今年中的第几天date "+%j"

reboot 重启系统

poweroff 关闭系统

wget 下载网络文件 wget -r -p http://www.linuxprobe.com

ps（process） 查看系统中的进程状态    ps aux

如前面所提到的，在 Linux 系统中的命令参数有长短格式之分，长格式和长格式之间不能合并，长格式和短格式之间也不能合并，但短格式和短格式之间是可以合并的，合并后仅保留一个-（减号）即可。另外
ps 命令可允许参数不加减号（ -），因此可直接写成 ps aux 的样子。

top 动态地监视进程活动与系统负载等信息，相当于任务管理器

pidof 查询某个指定服务进程的 PID 值 pidof sshd

kill 终止某个指定 PID 的服务进程

killall 终止某个指定名称的服务所对应的全部进程

uname 命令用于查看系统内核与系统版本等信息
uptime 用于查看系统的负载信息

free 用于显示当前系统中内存的使用量信息

sosreport 命令用于收集系统配置及架构信息并输出诊断文档

wc 命令用于统计指定文本的行数、字数、字节数

cut 按列提取数据 cut -d : -f 1 /etc/passwd
grep 在文本中执行关键词搜索，并显示匹配的结果

tar 对文件进行打包压缩或解压

alias 起命令别名

Vim编辑器：命令模式、编辑模式、末行模式   

命令切换编辑：a、i、o，命令切换末行：：，编辑(末行)切换命令：esc；

Shell脚本：#!告诉系统使用哪种 Shell 解释器来执行该脚本 #对脚本功能和某些命令的介绍信息
用 bash 解释器命令直接运行 Shell 脚本文件外，第二种运行脚本程序的方法是通过输入完整路径的方式来执行。但默认会因为权限不足而提示报错信息，此时只需要为脚本文件增加执行权限即可

脚本中出现的$（命令）是一种完全类似于第 3 章的转义字符中反引号`命令`的 Shell操作符，效果同样是执行括号或双引号括起来的字符串中的命令。

$0 对应的是当前 Shell 脚本程序的名称， $#对应的是总共有几个参数， $*对应的是所有位置的参数值，
$?对应的是显示上一次命令的执行返回值，而$1、 $2、 $3……则分别对应着第 N 个位置的参数值

$?变量，作用是显示上一次命令的执行返回值。若前面的那条语句成功执行，则$?变量会显示数字 0，反之则显示一个非零的数字（可能为 1，也可能为 2，取决于系统版本）

read 是用来读取用户输入信息的命令，能够把接收到的用户输入信息赋值给后面的指定变量， -p 参数用于向用户显示一定的提示信息。
read -p "Enter your score（ 0-100）：" GRADE

条件测试语句：[ 条件表达式 ]
-d 是否为目录  -e文件是否存在  -f是否为一般文件  -r 当前用户是否有权读取 -w -x
整数比较符：-eq -ne -gt -lt -ge -le
字符串比较符：= != -z

/dev/null 是一个被称作 Linux 黑洞的文件，把输出信息重定向到这个文件等同于删除数据（类似于没有回收功能的垃圾箱），可以让用户的屏幕窗口保持简洁

流程控制语句：
if 条件测试操作    						if	条件测试操作1
	then 命令序列1							then 命令序列1
	else 	命令序列2						elif 条件测试操作2
fi													then 命令序列2
												else 命令序列3
												fi
												
for 变量名 in 取值列表
do 命令序列
done

while 条件测试操作
do 命令序列
done

vim Guess.sh
#!/bin/bash
PRICE=$(expr $RANDOM % 1000)
TIMES=0
echo "商品实际价格为0～999之间，猜猜看是多少？"
while true
do
read -p "请输入你猜测的价格数目：" INT
let TIMES++
if [ $INT -eq $PRICE ];then
ehco "恭喜你答对了，实际价格为$PRICE"
ehco "你总共猜测了$TIMES次"
exit 0
elif [ $INT -gt $PRICE ];then
echo "太高了！"
else
echo "太低了！"
fi
done

case 变量值 in
模式1)
	命令序列1
	;;
模式2)
	命令序列2
	;;
*)
	默认命令序列
esac


计划任务服务程序
at 设置一次性计划任务   at 时间  at -l设置好但未执行的计划列表  atrm 任务序号
crontab 周期性有规律的执行任务 参数格式是“分、时、日、月、 星期 命令”
crontab -e 创建编辑计划任务  crontab -l 查看当前计划任务 crontab -r 删除计划任务

假设在每周一、三、五的凌晨 3 点 25 分，都需要使用 tar 命令把某个网站的数据目录进行打包处理，使其作为一个备份文件。
我们可以使用 crontab -e 命令来创建计划任务。为自己创建计划任务无需使用-u 参数，具体的实现效果的参数如 crontab -l 命令结果所示：
[root@linuxprobe ~]# crontab -e
25 3 * * 1,3,5 /usr/bin/tar -czvf backup.tar.gz /home/wwwroot

用户身份和文件权限

useradd 创建新用户  默认的用户家目录会被存放在/home 目录中，默认的 Shell 解释器为/bin/bash，而且默认会创建一个与该用户同名的基本用户组。

groupadd 创建用户组

usermod 修改用户属性

passwd 修改用户密码、过期时间、认证信息

userdel 删除用户

文件权限 rwx

在复杂多变的生产环境中，单纯设置文件的 rwx 权限无法满足我们对安全和灵活性的需求，因此便有了 SUID、SGID 与 SBIT 的特殊权限位。

chattr 设置文件隐藏权限
lsattr 显示文件隐藏权限

setfacl 管理文件的访问控制列表(ACL) 规则
getfacl 显示文件上设置的 ACL 信息

使用访问控制列表（ ACL）来限制 linuxprobe 用户组，使得该组中的所有成员不得在/tmp 目录中写入内容。
答：想要设置用户组的 ACL，则需要把 u 改成 g，即 setfacl -Rm g:linuxprobe:r-x /tmp。

存储结构和磁盘划分
/boot /dev /home /etc /media /usr /mnt /lib /bin /sbin /tmp /opt

“/dev/sda5”表示的就是“这是系统中第一块被识别到的硬件设备中分区编号为 5 的逻辑分区的设备文件”。

fdisk 管理磁盘分区，包括添加删除转换分区  -n -d -p

mkfs 格式化分区

终于完成了存储设备的分区和格式化操作，接下来就是要来挂载并使用存储设备了。与之相关的步骤也非常简单首先是创建一个用于挂载设备的挂载点目录；然后使用 mount 命令将存储设备与挂载点进行关联；最后使用 df-h 命令来查看挂载状态和硬盘使用量信息。

du 查看文件数据占用量的  du -sh /*命令来查看在 Linux 系统根目录下所有一级目录分别占用的空间大小。


mkswap swap分区专用格式化命令



软硬链接
硬链接：类似智能指针的引用计数一样
软链接：类似windows快捷方式

ln 创建链接文件   -s 创建“符号链接”（如果不带-s 参数，则默认创建硬链接）

RAID（ Redundant Array of Independent Disks，独立冗余磁盘阵列）

mdadm 命令用于管理 Linux 系统中的软件 RAID 硬盘阵列
mdadm -Cv /dev/md0 -a yes -n 4 -l 10 /dev/sdb /dev/sdc /dev/sdd /dev/sde
-C 参数代表创建一个 RAID 阵列卡；-v参数显示创建的过程，同时在后面追加一个设备名称/dev/md0，这样/dev/md0 就是创建后的RAID 磁盘阵列的名称；-a yes 参数代表自动创建设备文件；-n 4 参数代表使用 4 块硬盘来部署这个 RAID 磁盘阵列；而-l 10 参数则代表 RAID 10 方案；最后再加上 4 块硬盘设备的名称就搞定了。

mdadm -Cv /dev/md0 -n 3 -l 5 -x 1 /dev/sdb /dev/sdc /dev/sdd /dev/sde
创建一个 RAID 5 磁盘阵列+备份盘。在下面的命令中，参数-n 3 代表创建这个 RAID 5 磁盘阵列所需的硬盘数，参数-l 5 代表 RAID 的级别，而参数-x 1 则代表有一块备份盘。

LVM（ Logical Volume Manager，逻辑卷管理器）

物理卷（PV） 卷组（VG） 逻辑卷（LV）
























